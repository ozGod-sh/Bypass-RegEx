# -*- coding: utf-8 -*-
# Auteur: ozGod

import argparse
from urllib.parse import quote, quote_plus

def display_banner():
    """Affiche une banni√®re stylis√©e pour l'outil."""
    VERSION = "1.0.0"
    AUTHOR = "ozGod"
    banner = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë  üé≠ Bypass-RegEx v{VERSION}                                  ‚ïë
‚ïë                                                              ‚ïë
‚ïë  G√©n√©rateur de cha√Ænes pour contourner les filtres RegEx.   ‚ïë
‚ïë  Cr√©√© par {AUTHOR}                                           ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)

def generate_case_variations(payload):
    """G√©n√®re des variations de casse (ex: 'SeLeCt')."""
    if len(payload) > 10: # Limite pour √©viter une explosion combinatoire
        print("  - Variation de casse simple (majuscule/minuscule/titre)")
        yield payload.upper()
        yield payload.lower()
        yield payload.title()
        return

    print("  - Variations de casse mixtes...")
    # G√©n√®re toutes les combinaisons de casse possibles
    import itertools
    maps = itertools.product(*[[c.lower(), c.upper()] for c in payload])
    for i in maps:
        yield "".join(i)

def generate_url_encoded(payload):
    """G√©n√®re des variations encod√©es en URL."""
    print("\n--- Encodage URL ---")
    # Encodage standard
    encoded = quote(payload)
    print(f"  - Encodage Standard: {encoded}")
    # Encodage double
    double_encoded = quote(encoded)
    print(f"  - Encodage Double: {double_encoded}")
    # Encodage avec '+' pour les espaces
    print(f"  - Encodage avec '+': {quote_plus(payload)}")

def generate_html_entities(payload):
    """G√©n√®re des variations encod√©es en entit√©s HTML."""
    print("\n--- Encodage Entit√©s HTML ---")
    # Encodage d√©cimal
    decimal_encoded = ''.join(f'&#{ord(c)};' for c in payload)
    print(f"  - D√©cimal: {decimal_encoded}")
    # Encodage hexadecimal
    hex_encoded = ''.join(f'&#x{ord(c):x};' for c in payload)
    print(f"  - Hexad√©cimal: {hex_encoded}")

def main():
    display_banner()
    parser = argparse.ArgumentParser(
        description="G√©n√®re des variations d'un payload pour contourner les filtres bas√©s sur des expressions r√©guli√®res.",
        epilog=f"Cr√©√© par ozGod."
    )
    parser.add_argument("payload", help="Le payload ou mot-cl√© √† transformer (ex: '<script>alert(1)</script>').")
    args = parser.parse_args()

    print(f"[*] G√©n√©ration de variations pour le payload : '{args.payload}'\n")

    # G√©n√©ration des variations
    generate_url_encoded(args.payload)
    generate_html_entities(args.payload)

    print("\n--- Variations de Cas ---")
    for variation in generate_case_variations(args.payload):
        print(f"  - {variation}")

if __name__ == "__main__":
    main()
